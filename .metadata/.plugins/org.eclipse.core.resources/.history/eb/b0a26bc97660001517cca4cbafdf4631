package fjwa.model;
import java.time.Duration;
import java.time.Instant;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.validator.constraints.Range;

@Entity
@Table(name = "bomb_table")
public class Bomb {
	
	public static Bomb newInstance() {
		return new Bomb();
	}
	
	@Transient
	private boolean live = true;
	
	@Range(min = 1)
	private int startTimeInSeconds;
	
	
	@Id
	@GeneratedValue
	private long id;
	
	public int getStartTimeInSeconds() {
		return startTimeInSeconds;
	}

	

	public Instant getStartTime() {
		return startTime;
	}

	public void setStartTime(Instant startTime) {
		this.startTime = startTime;
	}

	private Instant startTime;

	private String description;
	
	public Bomb() {
		this.setStartTimeinSeconds(
				(int) (Math.random() * 20 + 5)
				);
	}

	@Override
	protected void finalize() throws Throwable {
		System.out.println(getName() + " Was DELETED by the GC!");
		super.finalize();
	}


	public long getId() {
		return 0;
	}


	public String getName() {
		// TODO Auto-generated method stub
		return "B" + this.id;
	}

	public int timeRemaining() {
		if (!live) {
			this.startTime = Instant.now();
			return this.startTimeInSeconds;
		}
		Instant now = Instant.now();
		Duration dt = Duration.between(this.startTime, now);
		int timeInSeconds = (int) (this.startTimeInSeconds - dt.getSeconds());
		return timeInSeconds;
	}	

	public boolean hasTimeRunOut() {
		return timeRemaining() < 0;
	}
	
	public boolean isLive() {
		return live && !this.hasTimeRunOut();
	}

	public long setId(long id) {
		return this.id = id;
	}

	public void setLive(boolean live) {
		this.startTime = Instant.now();
		this.live = live;
	}

	public void setStartTimeInSeconds(int timeInSeconds) {
		this.startTimeInSeconds =  timeInSeconds;
		this.live = true;
		this.startTime = Instant.now();
	}

	
	@Override
	public String toString() {
		return this.getDescription();
	}
	
	public String getDescription() {
		this.description = "Bomb " + this.getName() + ": ";
		if (this.hasTimeRunOut())
			description += "<span style=\"color: red;\">BOOM!</span>";
		else if (!live)
			description += "<span style=\"color: green;\">Diffused @ " + this.timeRemaining() + "</span>";
		else
			description += this.timeRemaining() + " seconds!";
		return description;
	}
	
}
