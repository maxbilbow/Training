package java8;

import java.util.*;
import java.io.File;

public class JavaFileFilter {



	private static List<File> closures(File dir) throws UnsupportedOperationException {
		File[] files = dir.listFiles(new FileFilter() {

			@Override
			public boolean accept(File dir, String name) {
				System.out.println(name);
				return name != null ? name.endsWith(".java") : false;
			}

		});
		System.out.println(files.length);
		return makeList(files);
	}

	private static List<File> lambderFiles(File dir) {
		FileFilter fileFilter = (File file, String name) -> {  
				System.out.println(name);
				return file.getName().endsWith(".java");};
		return makeList(
				dir.listFiles(fileFilter)
				);
	}

	private static <T> List<T> makeList(T[] array){
		List<T> list = Collections.emptyList();
		for (T t : array) {
			list.add(t);
		}
		return list;
	}

	public static void main(String[] args) {
		final File dir = new File("C:\\temp");
		try {
			List<File> javaFiles = closures(dir);
			if (javaFiles != null) {
				System.out.println("Without Lambda:");
				javaFiles.forEach(System.out::println);
			}
		} catch (UnsupportedOperationException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		
		List<File> lambdaFiles = lambderFiles(dir);
		System.out.println("   WITH Lambda:");
		lambdaFiles.forEach(System.out::println);

	}




}
