package fjwa.service;


import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Predicate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import fjwa.RMXException;
import fjwa.model.Bomb;
import fjwa.model.Bombs;
import fjwa.repository.BombRepository;
import fjwa.repository.EntityRepository;


@Service("bombService")
public class BombServiceImpl extends AbstractEntityService<Bomb> {

	

	@Autowired
	private BombRepository bombRepository;

	
	


	@Override
	public void defuse() {
		for (Bomb bomb : bombs)
			bomb.setLive(false);
	}

	private Collection<Bomb> expiredList = new HashSet<>();

	

	@Override
	@Transactional
	public void cleanUp() {
		try {
			if (expiredList.size() == 0)
				return;
			for (Bomb bomb : expiredList)
				this.remove(bomb);
			expiredList.clear();
			
		} catch (Exception e) {
			this.addError(RMXException.unexpected(e));
		} finally {
			System.gc();
		}

	}


	@Override
	public Collection<Bomb> update() {
		for (Bomb bomb: bombs)
			if (bomb.hasTimeRunOut()) 
				expiredList.add(bomb);
		return bombs;
	}



//	@Override
//	@Transactional
	@Deprecated
	public Bomb remove(final long id) throws RMXException {
		try {
			Object[] arr = bombs.stream().filter(new Predicate<Bomb>(){
				@Override
				public boolean test(Bomb b) {
					return b != null && b.getId() == id;
				}
			}).toArray();

			Bomb expired;
			if (arr.length == 0) {
				expired = bombRepository.getBomb(id);
			} else {
				expired = (Bomb) arr[0];
				bombs.remove(expired);
			}
			this.remove(expired);
			return expired;
		} catch (RMXException e) {
			this.addError(e);
			e.printStackTrace();
		} catch (Exception e) {
			this.addError(RMXException.unexpected(e));
		} 
		return null;
	}


	@Override
	protected EntityRepository<Bomb> repository() {
		return this.bombRepository;
	}



}
